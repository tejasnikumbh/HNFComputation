/*=============================================================================

This file is sample code for the FLINT GSoC proposal. No parts of this
file may be copied and used without the author's permission. FLINT is a 
Fast Library for Number Theory. I hope to contribute to FLINT via GSoC
this year.

=============================================================================*/
/******************************************************************************

Copyright (C) 2014 Tejas Nikumbh
Special Thanks : Bill Hart

******************************************************************************/

/*
 * File : HNF.txt
 * ==========================================================================*
 * This file is a documentation for the interface and implementation of the  * 
 * functions used for the computation of HNF of a matrix using the Naive Algo*
 * -rithm.								     *
 * ==========================================================================*/

******************************************************************************

        			Display Functions

******************************************************************************

void display_matrix(size_t N,size_t M,int matrix[N][M]);

	* Function : display_matrix					  *	
 	* Usage    : display_matrix(n,m,matrix[n][m]) 			  *	
 	* ----------------------------------------------------------------*
 	* Functions displays teh matrix pointer to which is passed to the *
 	* function. 							  * 
 	* ----------------------------------------------------------------*

******************************************************************************

        			Algorithm Functions

******************************************************************************

void compute_HNF(size_t N,size_t M, int A[N][M]);

	* Function   : compute_HNF					  *
	* Usage      : compute_HNF(m,n,matrix[m][n])			  *
 	* Parameters : sizes and pointer to the matrix whose HNF we want  *
 	*              to compute.					  *	
 	* ----------------------------------------------------------------*
 	* This function computes the Hermite Normal Form of a matrix, by  *
 	* modifying the original matrix itself. This function outputs a   *
 	* lower triangular form of the HNF of the matrix. We do normal    *
	* operations on the matrix to obtain the column reduced echelon   *
 	* form.								  *	
 	* ----------------------------------------------------------------*

void is_all_zero(int r,int c, size_t N, size_t M, int A[N][M])

	* Function   : is_all_zero					  *
	* Usage      : is_all_zero(r,c,m,n,matrix[m][n])		  *
 	* Parameters : Current value of r,c relevant to the algorithm and *
 	*	       A, the matrix whose HNF is being computed	  *		
	* Returns    : 1 or 0 depending upon whether the partial row r,   *
	*              starting at index  c, is zero or not.		  *
 	* ----------------------------------------------------------------*
	* This is a helper function for the compute_HNF function. It      *
	* returns whether the partial row r of the matrix A, starting at  * 
        * index c , is a zero vector or not.				  *
 	* ----------------------------------------------------------------*
	
